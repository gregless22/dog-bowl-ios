//
//  model.swift
//  dog-bowl
//  this swift file is for the implementation of the model. It is for ensuring that it is
//  a singelton and there is only one instance of the class.
//
//  Created by Greg Connolly on 28/6/18.
//  Copyright Â© 2018 sunny-coast-coders. All rights reserved.
//

import Foundation
import CoreLocation
import CoreData
import UIKit


class Model {
    
    // dispatch queues this has yet been implemented.  Will need to do so.
//    let convertQueue = DispatchQueue.self
//    let saveQueue = DispatchQueue.self
    
    //singleton for creation of one instance of MyModel
    static let myModel = Model()
    
    //create a link to the appdelegate file
    let appDelegate = UIApplication.shared.delegate as! AppDelegate
    
    // create a managed context variable
    let managedContext: NSManagedObjectContext
    
    //container to hold the dog bowls and one for the erros.
    var myDogBowls = [DogBowl]()
    var myErrors = [ErrorRecording]()
    
    private init(){
        
        //create a link to the managed context data.
       managedContext = appDelegate.persistentContainer.viewContext
        
        //populate the dog bowls array
        getDogBowls()
        myErrors = []
       
    }


}

extension Model:ImgDelegate {

    func updateDatabase() {
        
        do {
            try managedContext.save()
        }
            
        catch let error as NSError {
            
            print("Could not save \(error), \(error.userInfo)")
            
        }
    }
    
    //this will delete a specific dog bowl in the data.
    func deleteDogBowl(_ indexPath: IndexPath) {
        let dogBowl = myDogBowls[indexPath.item]
        myDogBowls.remove(at: indexPath.item)
        managedContext.delete(dogBowl)
        updateDatabase()
    }
    
    // This returns all of the dog bowls that are stored in core data.
    func getDogBowls() {
        do {
            let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: "DogBowl")
            let results = try managedContext.fetch(fetchRequest)
            myDogBowls = results as! [DogBowl]
        }
        catch let error as NSError {
            
            print("Could not fetch \(error), \(error.userInfo)")
        }
       
    }


    func saveDogBowls(name: String, establishmentType: EstablishmentType, longitude: Double, latitude: Double, vicinity: String, image: UIImage) {
        
        var imageSave:NSData?
        
        //complete image processing this should be completed async in the future
        imageSave = self.prepareImageForSaving(image: image)
        
        //create a new dog bowl
        let dogBowlEntity = NSEntityDescription.entity(forEntityName: "DogBowl", in: managedContext)
        let dogBowl = NSManagedObject(entity: dogBowlEntity!, insertInto: managedContext) as! DogBowl

        //create a new establishment
        let establishmentEntity = NSEntityDescription.entity(forEntityName: "Establishment", in: managedContext)
        let establishment = NSManagedObject(entity: establishmentEntity!, insertInto: managedContext) as! Establishment
        
       //populate with data.
        establishment.setValue(longitude, forKey: "longitude")
        establishment.setValue(latitude, forKey: "latitude")
        establishment.setValue(vicinity, forKey: "vicinity")
        establishment.setValue(establishmentType.rawValue, forKey: "establishmentType")
        dogBowl.setValue(name, forKey: "name")
        dogBowl.setValue(establishment, forKey: "establishment")
        dogBowl.setValue(imageSave, forKey: "imgData")
        myDogBowls.append(dogBowl)

        updateDatabase()
    }

    func addError(_ error: ErrorRecording) {
        myErrors.append(error)
    }
    
}










